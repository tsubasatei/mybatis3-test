<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!-- org.apache.ibatis.session.Configuration -->
    <!--
		1、mybatis 可以使用 properties 来引入外部 properties 配置文件的内容；
		resource：引入类路径下的资源
		url：引入网络路径或者磁盘路径下的资源
	  -->
    <properties resource="db.properties"></properties>

    <!--
		2、settings 包含很多重要的设置项
            setting:用来设置每一个设置项
                name：设置项名
                value：设置项取值
	 -->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--<setting name="logImpl" value="LOG4J"/>-->

        <!-- 显示的指定每个需要更改的配置的值，即使是默认的，防止版本更新带来的问题 -->
        <!-- 打开延迟加载的开关 -->
        <setting name="lazyLoadingEnabled" value="true"/>

        <!-- 将积极加载改为消息加载即按需加载 -->
        <setting name="aggressiveLazyLoading" value="false"/>

        <!-- 指定哪个对象的方法触发一次延迟加载。默认值：equals,clone,hashCode,toString(如果不配置,使用println()会触发延迟加载)  -->
        <!--<setting name="lazyLoadTriggerMethods" value="" />-->

        <!-- 开启二级缓存 -->
        <setting name="cacheEnabled" value="true"/>
    </settings>

    <!--
        3、typeAliases：别名处理器：可以为我们的 java 类型起别名
			别名不区分大小写
	-->

    <typeAliases>
        <!--
            3.1、typeAlias:为某个 java 类型起别名
                type:指定要起别名的类型全类名;默认别名就是类名小写；employee
                alias:指定新的别名
         -->
        <!--<typeAlias type="com.mybatis.bean.Employee" alias="emp"/> -->

        <!--
            3.2、package:为某个包下的所有类批量起别名
                name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）
        -->
        <package name="com.mybatis.bean"/>

        <!--3、批量起别名的情况下，使用 @Alias 注解为某个类型指定新的别名-->
    </typeAliases>

    <typeHandlers>
        <!--<typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/>-->

        <!--1、配置我们自定义的TypeHandler  -->
        <typeHandler handler="com.mybatis.typehandler.EmpStatusTypeHandler" javaType="com.mybatis.bean.EmpStatus"/>

        <!--2、也可以在处理某个字段的时候告诉 MyBatis 用什么类型处理器
				保存：#{empStatus,typeHandler=xxxx}
				查询：
					<resultMap type="com.atguigu.mybatis.bean.Employee" id="MyEmp">
				 		<id column="id" property="id"/>
				 		<result column="empStatus" property="empStatus" typeHandler=""/>
				 	</resultMap>
				注意：如果在参数位置修改TypeHandler，应该保证保存数据和查询数据用的TypeHandler是一样的。
		  -->
    </typeHandlers>
    <!-- plugins: 注册插件 -->
    <plugins>
        <!--<plugin interceptor="com.mybatis.intetceptor.MyFirstInterceptor">
            <property name="username" value="root"/>
            <property name="password" value="root"/>
        </plugin>
        <plugin interceptor="com.mybatis.intetceptor.MySecondInterceptor"/>-->
        <plugin interceptor="com.github.pagehelper.PageInterceptor"/>
    </plugins>

    <!--
		4、environments：环境们，mybatis 可以配置多种环境, default 指定使用某种环境。可以达到快速切换环境。
			environment：配置一个具体的环境信息；必须有两个标签；id 代表当前环境的唯一标识
				transactionManager：事务管理器；
					type：事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
						  自定义事务管理器：实现TransactionFactory接口.type指定为全类名

				dataSource：数据源;
					type:数据源类型
					            |UNPOOLED(UnpooledDataSourceFactory)
								|POOLED(PooledDataSourceFactory)
								|JNDI(JndiDataSourceFactory)
					自定义数据源：实现 DataSourceFactory 接口，type 是全类名
     -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 5、databaseIdProvider：支持多数据库厂商的；
             type="DB_VENDOR"：VendorDatabaseIdProvider
                作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
                MySQL，Oracle，SQL Server,xxxx
	  -->
    <!-- 为不同的数据库厂商起别名 -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!-- 将写好的 sql 映射文件一定注册到全局配置文件中 -->
    <!-- 6、mappers：将 sql 映射注册到全局配置中 -->
    <!--
        mapper:注册一个 sql 映射
            注册配置文件
            resource：引用类路径下的 sql 映射文件
                mapper/EmployeeMapper.xml
            url：引用网路路径或者磁盘路径下的sql映射文件
                file:///var/mappers/AuthorMapper.xml

            注册接口
            class：引用（注册）接口，
                1、有 sql 映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
                2、没有 sql 映射文件，所有的sql都是利用注解写在接口上;
                推荐：
                    比较重要的，复杂的 Dao 接口我们来写sql映射文件
                    不重要，简单的 Dao 接口为了开发快速可以使用注解；
    -->
    <!-- <mapper resource="mybatis/mapper/EmployeeMapper.xml"/> -->
    <!-- <mapper class="com.mybatis.dao.EmployeeMapperAnnotation"/> -->

    <!--<mapper resource="com/mybatis/mapper/EmployeeMapper.xml"/>-->

    <!-- 批量注册： -->
    <mappers>
        <!--<mapper class="com.mybatis.mapper.EmployeeMapperAnnotation"/>-->
        <package name="com.mybatis.mapper"/>
    </mappers>

</configuration>