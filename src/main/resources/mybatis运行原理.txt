MyBatis 运行原理：
1、获取 sqlSessionFactory 对象:
    解析文件的每一个信息保存在 Configuration 中，返回包含 Configuration 的 DefaultSqlSessionFactory；
    注意：【MappedStatement】：代表一个增删改查的详细信息

2、获取 sqlSession 对象
    返回一个 DefaultSqlSession 对象，包含 Executor 和 Configuration;
    这一步会创建Executor对象；

3、获取接口的代理对象（MapperProxy）
    getMapper，使用 MapperProxyFactory 创建一个 MapperProxy 的代理对象
    代理对象里面包含了，DefaultSqlSession（Executor）

4、执行增删改查方法

总结：
    1、根据配置文件（全局，sql映射）初始化出 Configuration 对象
    2、创建一个 DefaultSqlSession 对象，
            他里面包含Configuration以及
            Executor（根据全局配置文件中的 defaultExecutorType 创建出对应的 Executor）
    3、DefaultSqlSession.getMapper（）：拿到 Mapper 接口对应的 MapperProxy；
    4、MapperProxy里面有（DefaultSqlSession）；
    5、执行增删改查方法：
            1）、调用 DefaultSqlSession 的增删改查（Executor）；
            2）、会创建一个StatementHandler对象。
                （同时也会创建出 ParameterHandler 和 ResultSetHandler）
            3）、调用 StatementHandler 预编译参数以及设置参数值;
                 使用 ParameterHandler 来给 sql 设置参数
            4）、调用 StatementHandler 的增删改查方法；
            5）、ResultSetHandler 封装结果
    注意：
        四大对象每个创建的时候都有一个 interceptorChain.pluginAll(parameterHandler);


插件原理
    在四大对象创建的时候
    1、每个创建出来的对象不是直接返回的，而是
        interceptorChain.pluginAll(parameterHandler);

    2、获取到所有的 Interceptor（拦截器）（插件需要实现的接口）；
        调用 interceptor.plugin(target);返回 target 包装后的对象

    3、插件机制，我们可以使用插件为目标对象创建一个代理对象；AOP（面向切面）
        我们的插件可以为四大对象创建出代理对象；
        代理对象就可以拦截到四大对象的每一个执行；

		public Object pluginAll(Object target) {
		    for (Interceptor interceptor : interceptors) {
		      target = interceptor.plugin(target);
		    }
		    return target;
		  }

插件编写：
    1、编写 Interceptor 的实现类
    2、使用 @Intercepts注解完成插件签名
    3、将写好的插件注册到全局配置文件中
