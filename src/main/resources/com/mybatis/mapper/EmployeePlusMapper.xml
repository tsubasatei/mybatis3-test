<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mybatis.mapper.EmployeePlusMapper">
    <resultMap id="MySimpleEmp" type="com.mybatis.bean.Employee">
        <!--
            指定主键列的封装规则
            id：定义主键会底层有优化；
            column：指定哪一列
            property：指定对应的 javaBean 属性
		  -->
        <id column="id" property="id"/>

        <!--
            定义普通列封装规则
            其他不指定的列会自动封装：我们只要写 resultMap 就把全部的映射规则都写上。
        -->
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
    </resultMap>

    <!-- resultMap:自定义结果集映射规则；  -->
    <select id="getEmpById" resultMap="MySimpleEmp">
        select * from tbl_employee where id = #{id}
    </select>

    <!--
	场景一：
		查询 Employee 的同时查询员工对应的部门
		Employee === Department
		一个员工有与之对应的部门信息；
		id  last_name  gender    d_id     did  dept_name (private Department dept;)
	 -->

    <!--
        联合查询：级联属性封装结果集
    -->
    <resultMap id="MyDifEmp" type="com.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>

        <result column="d_id" property="department.id"/>
        <result column="department_name" property="department.departmentName"/>
    </resultMap>

    <!--
		使用 association 定义关联的单个对象的封装规则；
	 -->
    <resultMap id="MyDifEmp2" type="com.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>

        <!--
            association：可以指定联合的j avaBean 对象
            property="department"：指定哪个属性是联合的对象
            javaType: 指定这个属性对象的类型[不能省略]
		-->
        <association property="department" javaType="com.mybatis.bean.Department">
            <id column="d_id" property="id"/>
            <result column="department_name" property="departmentName"/>
        </association>
    </resultMap>
    <select id="getEmpAndDept" resultMap="MyDifEmp2">
        SELECT e.id id, e.`last_name` last_name, e.gender gender, e.email email, e.`d_id` d_id, d.`department_name` department_name
        FROM tbl_employee e
        INNER JOIN tbl_department d
        ON e.`d_id` = d.id
        WHERE e.`id`=1
    </select>

    <!-- 使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中；
	 -->
    <resultMap id="MyStepEmp" type="com.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>

        <!-- association定义关联对象的封装规则
	 		select:表明当前属性是调用select指定的方法查出的结果
	 		column:指定将哪一列的值传给这个方法

	 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
	 	 -->
        <association property="department"
                     select="com.mybatis.mapper.DepartmentMapper.getDeptById"
                     column="d_id"/>
    </resultMap>
    <!--<select id="getEmpByIdStep" resultMap="MyStepEmp">-->
    <select id="getEmpByIdStep" resultMap="MyEmpDis">
        select * from tbl_employee where id=#{id}
    </select>

    <!-- 可以使用延迟加载（懒加载）；(按需加载)
	 	Employee==>Dept：
	 		我们每次查询Employee对象的时候，都将一起查询出来。
	 		部门信息在我们使用的时候再去查询；
	 		分段查询的基础之上加上两个配置：lazyLoadingEnabled 、aggressiveLazyLoading
	 		mybatis jar包版本：3.5.x
	  -->
    <!-- ==================association============================ -->


    <!--
	场景二：
		查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentMapper.xml中
	 -->
    <select id="getEmpsByDeptId" resultType="com.mybatis.bean.Employee">
        select * from tbl_employee where d_id=#{deptId}
    </select>

    <!-- =======================鉴别器============================ -->
    <!-- <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用 discriminator 判断某列的值，然后根据某列的值改变封装行为
        封装 Employee：
            如果查出的是女生：就把部门信息查询出来，否则不查询；
            如果是男生，把last_name这一列的值赋值给email;
     -->
    <resultMap id="MyEmpDis" type="com.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--
	 		column：指定判定的列名
	 		javaType：列值对应的java类型
	 	-->
        <discriminator javaType="string" column="gender">
            <!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap-->
            <case value="0" resultType="com.mybatis.bean.Employee">
                <association property="department"
                             select="com.mybatis.mapper.DepartmentMapper.getDeptById"
                             column="d_id"/>
            </case>
            <case value="1" resultType="com.mybatis.bean.Employee">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="gender" property="gender"/>
                <result column="last_name" property="email"/>

            </case>
        </discriminator>
    </resultMap>
</mapper>