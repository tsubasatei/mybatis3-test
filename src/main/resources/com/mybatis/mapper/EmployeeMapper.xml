<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace：名称空间，指定为接口的全类名
    id：唯一标识，方法名
    resultType：返回值类型
    #{id}：从传递过来的参数中取出 id 值
-->
<mapper namespace="com.mybatis.mapper.EmployeeMapper">


    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
     <!--<cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>-->
    <!--
    eviction:缓存的回收策略：
        • LRU – 最近最少使用的：移除最长时间不被使用的对象。
        • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
        • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
        • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
        • 默认的是 LRU。
    flushInterval：缓存刷新间隔
        缓存多长时间清空一次，默认不清空，设置一个毫秒值
    readOnly:是否只读：
        true：只读；mybatis 认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
                 mybatis 为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
        false：非只读：mybatis 觉得获取的数据可能会被修改。
                mybatis 会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
    size：缓存存放多少元素；
    type=""：指定自定义缓存的全类名；
            实现 Cache 接口即可；
    -->

    <select id="selectEmpById" resultType="com.mybatis.bean.Employee">
        select * from tbl_employee where id = #{id}
    </select>

    <!--
        parameterType：参数类型，可以省略

        获取自增主键的值：
            mybatis支持自增主键，自增主键值的获取，mybatis 也是利用 statement.getGeneratedKeys()
            useGeneratedKeys="true" : 使用自增主键获取主键值策略
            keyProperty：指定对应的逐渐属性，mybatis 获取到主键值以后，将这个值封装给 javaBean 的哪个属性
    -->
    <insert id="insertEmp" parameterType="com.mybatis.bean.Employee"
            useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name, gender, email)
        values(#{lastName}, #{gender}, #{email})
    </insert>

    <update id="updateEmp">
        update tbl_employee
        set last_name=#{lastName},
            gender=#{gender},
            email=#{email}
        where id=#{id}
    </update>

    <delete id="deleteEmp">
        delete from tbl_employee where id=#{id}
    </delete>

    <select id="getEmpByIdAndLastName" resultType="com.mybatis.bean.Employee">
        select * from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>

    <select id="getEmpByMap" resultType="com.mybatis.bean.Employee">
        select * from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>

    <!--
        resultType：如果返回的是一个集合，要写集合中元素的类型
    -->
    <select id="getEmpNameLike" resultType="com.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <select id="getEmpByIdReturnMap" resultType="map">
        select * from tbl_employee where id=#{id}
    </select>

    <select id="getEmpByLastNameLikeReturnMap" resultType="com.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>
</mapper>